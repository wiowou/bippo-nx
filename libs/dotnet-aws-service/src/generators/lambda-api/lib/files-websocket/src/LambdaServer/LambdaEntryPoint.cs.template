using System.Globalization;
using System.Net;
using System.Security.Claims;
using Amazon.Lambda.APIGatewayEvents;
using Amazon.Lambda.AspNetCoreServer.Internal;
using Amazon.Lambda.Core;
using Microsoft.AspNetCore.Http.Features;
using Microsoft.AspNetCore.Http.Features.Authentication;

namespace <%= projectNamePascal %>;

/// <summary>
/// This class extends from APIGatewayProxyFunction which contains the method FunctionHandlerAsync which is the 
/// actual Lambda function entry point. The Lambda handler field should be set to
/// 
/// <%= projectNamePascal %>::<%= projectNamePascal %>.LambdaEntryPoint::FunctionHandlerAsync
/// </summary>
public class LambdaEntryPoint :
  // The base class must be set to match the AWS service invoking the Lambda function. If not Amazon.Lambda.AspNetCoreServer
  // will fail to convert the incoming request correctly into a valid ASP.NET Core request.
  //
  // API Gateway REST API                         -> Amazon.Lambda.AspNetCoreServer.APIGatewayProxyFunction
  // API Gateway HTTP API payload version 1.0     -> Amazon.Lambda.AspNetCoreServer.APIGatewayProxyFunction
  // API Gateway HTTP API payload version 2.0     -> Amazon.Lambda.AspNetCoreServer.APIGatewayHttpApiV2ProxyFunction
  // Application Load Balancer                    -> Amazon.Lambda.AspNetCoreServer.ApplicationLoadBalancerFunction
  // 
  // Note: When using the AWS::Serverless::Function resource with an event type of "HttpApi" then payload version 2.0
  // will be the default and you must make Amazon.Lambda.AspNetCoreServer.APIGatewayHttpApiV2ProxyFunction the base class.

  Amazon.Lambda.AspNetCoreServer.APIGatewayProxyFunction
{
  /// <summary>
  /// The builder has configuration, logging and Amazon API Gateway already configured. The startup class
  /// needs to be configured in this method using the UseStartup<>() method.
  /// </summary>
  /// <param name="builder">The IWebHostBuilder to configure.</param>
  protected override void Init(IWebHostBuilder builder)
  {
    builder.UseStartup<Startup>();
  }

  /// <summary>
  /// Convert the JSON document received from API Gateway into the InvokeFeatures object.
  /// InvokeFeatures is then passed into IHttpApplication to create the ASP.NET Core request objects.
  /// </summary>
  /// <param name="features"></param>
  /// <param name="apiGatewayRequest"></param>
  /// <param name="lambdaContext"></param>
  protected override void MarshallRequest(InvokeFeatures features, APIGatewayProxyRequest apiGatewayRequest, ILambdaContext lambdaContext)
  {
    {
      var authFeatures = (IHttpAuthenticationFeature)features;

      var authorizer = apiGatewayRequest?.RequestContext?.Authorizer;

      if (authorizer != null)
      {
        // handling claims output from cognito user pool authorizer
        if (authorizer.Claims != null && authorizer.Claims.Count != 0)
        {
          var identity = new ClaimsIdentity(authorizer.Claims.Select(
              entry => new Claim(entry.Key, entry.Value.ToString())), "AuthorizerIdentity");

          // _logger.LogDebug(
          //     $"Configuring HttpContext.User with {authorizer.Claims.Count} claims coming from API Gateway's Request Context");
          authFeatures.User = new ClaimsPrincipal(identity);
        }
        else
        {
          // handling claims output from custom lambda authorizer
          var identity = new ClaimsIdentity(
              authorizer.Where(x => x.Value != null && !string.Equals(x.Key, "claims", StringComparison.OrdinalIgnoreCase))
                  .Select(entry => new Claim(entry.Key, entry.Value.ToString())), "AuthorizerIdentity");

          // _logger.LogDebug(
          //     $"Configuring HttpContext.User with {authorizer.Count} claims coming from API Gateway's Request Context");
          authFeatures.User = new ClaimsPrincipal(identity);
        }
      }

      // Call consumers customize method in case they want to change how API Gateway's request
      // was marshalled into ASP.NET Core request.
      PostMarshallHttpAuthenticationFeature(authFeatures, apiGatewayRequest, lambdaContext);
    }
    {
      var requestFeatures = (IHttpRequestFeature)features;
      requestFeatures.Scheme = "https";
      requestFeatures.Method = "POST";

      string path = "/" + apiGatewayRequest.RequestContext.RouteKey;

      var rawQueryString = Lambda.Server.Utilities.CreateQueryStringParameters(
          apiGatewayRequest.QueryStringParameters, apiGatewayRequest.MultiValueQueryStringParameters, true);

      requestFeatures.RawTarget = apiGatewayRequest.Path + rawQueryString;
      requestFeatures.QueryString = rawQueryString;
      requestFeatures.Path = path;

      requestFeatures.PathBase = string.Empty;
      if (!string.IsNullOrEmpty(apiGatewayRequest?.RequestContext?.Path))
      {
        // This is to cover the case where the request coming in is https://myapigatewayid.execute-api.us-west-2.amazonaws.com/Prod where
        // Prod is the stage name and there is no ending '/'. Path will be set to '/' so to make sure we detect the correct base path
        // append '/' on the end to make the later EndsWith and substring work correctly.
        var requestContextPath = apiGatewayRequest.RequestContext.Path;
        if (path.EndsWith("/") && !requestContextPath.EndsWith("/"))
        {
          requestContextPath += "/";
        }
        else if (!path.EndsWith("/") && requestContextPath.EndsWith("/"))
        {
          // Handle a trailing slash in the request path: e.g. https://myapigatewayid.execute-api.us-west-2.amazonaws.com/Prod/foo/
          requestFeatures.Path = path += "/";
        }

        if (requestContextPath.EndsWith(path))
        {
          requestFeatures.PathBase = requestContextPath.Substring(0,
              requestContextPath.Length - requestFeatures.Path.Length);
        }
      }

      requestFeatures.Path = Lambda.Server.Utilities.DecodeResourcePath(requestFeatures.Path);

      Lambda.Server.Utilities.SetHeadersCollection(requestFeatures.Headers, apiGatewayRequest.Headers, apiGatewayRequest.MultiValueHeaders);

      if (!requestFeatures.Headers.ContainsKey("Host"))
      {
        var apiId = apiGatewayRequest?.RequestContext?.ApiId ?? "";
        var stage = apiGatewayRequest?.RequestContext?.Stage ?? "";

        requestFeatures.Headers["Host"] = $"apigateway-{apiId}-{stage}";
      }
      requestFeatures.Headers["Content-Type"] = "application/json";


      if (!string.IsNullOrEmpty(apiGatewayRequest.Body))
      {
        requestFeatures.Body = Lambda.Server.Utilities.ConvertLambdaRequestBodyToAspNetCoreBody(apiGatewayRequest.Body, apiGatewayRequest.IsBase64Encoded);
      }

      // Make sure the content-length header is set if header was not present.
      const string contentLengthHeaderName = "Content-Length";
      if (!requestFeatures.Headers.ContainsKey(contentLengthHeaderName))
      {
        requestFeatures.Headers[contentLengthHeaderName] = requestFeatures.Body == null ? "0" : requestFeatures.Body.Length.ToString(CultureInfo.InvariantCulture);
      }


      // Call consumers customize method in case they want to change how API Gateway's request
      // was marshalled into ASP.NET Core request.
      PostMarshallRequestFeature(requestFeatures, apiGatewayRequest, lambdaContext);
    }


    {
      // set up connection features
      var connectionFeatures = (IHttpConnectionFeature)features;

      if (!string.IsNullOrEmpty(apiGatewayRequest?.RequestContext?.Identity?.SourceIp) &&
          IPAddress.TryParse(apiGatewayRequest.RequestContext.Identity.SourceIp, out var remoteIpAddress))
      {
        connectionFeatures.RemoteIpAddress = remoteIpAddress;
      }

      if (apiGatewayRequest?.Headers?.TryGetValue("X-Forwarded-Port", out var forwardedPort) == true)
      {
        connectionFeatures.RemotePort = int.Parse(forwardedPort, CultureInfo.InvariantCulture);
      }
      connectionFeatures.ConnectionId = apiGatewayRequest.RequestContext?.ConnectionId;

      // Call consumers customize method in case they want to change how API Gateway's request
      // was marshalled into ASP.NET Core request.
      PostMarshallConnectionFeature(connectionFeatures, apiGatewayRequest, lambdaContext);
    }

    {
      var tlsConnectionFeature = (ITlsConnectionFeature)features;
      var clientCertPem = apiGatewayRequest?.RequestContext?.Identity?.ClientCert?.ClientCertPem;
      if (clientCertPem != null)
      {
        tlsConnectionFeature.ClientCertificate = Lambda.Server.Utilities.GetX509Certificate2FromPem(clientCertPem);
      }
      PostMarshallTlsConnectionFeature(tlsConnectionFeature, apiGatewayRequest, lambdaContext);
    }
  }
}