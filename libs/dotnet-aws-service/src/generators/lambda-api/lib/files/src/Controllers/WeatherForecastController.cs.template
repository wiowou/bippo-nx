using Microsoft.EntityFrameworkCore;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Http;

using <%= projectNamePascal %>.Service;
using <%= projectNamePascal %>.Dto;

namespace <%= projectNamePascal %>.Controllers;

/// <summary>
/// Provides methods related to the weather forecast.
/// </summary>
///
[ApiController]
[Route("[controller]")]
public class WeatherForecastController : ControllerBase
{
  private static readonly string[] Summaries = new[]
  {
    "Freezing", "Bracing", "Chilly", "Cool", "Mild", "Warm", "Balmy", "Hot", "Sweltering", "Scorching"
  };

  private readonly ILogger<WeatherForecastController> _logger;
  private readonly IHotelService _hotelService;

  public WeatherForecastController(ILogger<WeatherForecastController> logger, IHotelService hotelService)
  {
    _logger = logger;
    _hotelService = hotelService;
  }

  /// <summary>
  /// Gets the forecast for the next 5 days
  /// </summary>
  ///
  /// <remarks>
  /// This method is very easy to use
  /// </remarks>
  ///
  [ProducesResponseType(typeof(string), StatusCodes.Status200OK)]
  [ProducesResponseType(typeof(string), StatusCodes.Status404NotFound)]
  [ProducesResponseType(typeof(string), StatusCodes.Status400BadRequest)]
  [HttpGet("forecast")]
  public IEnumerable<WeatherForecast> Get()
  {
    Console.WriteLine("getting weather forecast");
    return Enumerable.Range(1, 5).Select(index => new WeatherForecast
    {
      //Date = DateOnly.FromDateTime(DateTime.Now.AddDays(index)),
      Date = DateTime.Now.AddDays(index),
      TemperatureC = Random.Shared.Next(-20, 55),
      Summary = Summaries[Random.Shared.Next(Summaries.Length)]
    })
    .ToArray();
  }

  /// <summary>
  /// Gets a hotel
  /// </summary>
  /// <param name="hotelId">long</param>
  /// <remarks>
  /// This method is very easy to use
  /// </remarks>
  [ProducesResponseType(typeof(string), StatusCodes.Status200OK)]
  [ProducesResponseType(typeof(string), StatusCodes.Status404NotFound)]
  [HttpGet("hotels/{hotelId}")]
  public async Task<ActionResult<IEnumerable<IHotelResponseDto>>> GetHotel(long hotelId)
  {
    try 
    {
      var hotels = await _hotelService.GetHotelAsync(hotelId);
      return Ok(hotels);
    }
    catch (NotFoundException ex)
    {
      return NotFound(new { Error = ex.Message });
    }
  }
}
