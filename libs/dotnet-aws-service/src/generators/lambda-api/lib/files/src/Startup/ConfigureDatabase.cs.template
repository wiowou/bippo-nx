using Amazon.SecretsManager;
using AWS.Lambda.Powertools.Parameters;
using AWS.Lambda.Powertools.Parameters.SecretsManager;
using Microsoft.EntityFrameworkCore;
using Npgsql;
using System.Text.Json;

namespace <%= projectNamePascal %>;
using <%= projectNamePascal %>.Repository;

public partial class Startup
{
  // This method gets called by the runtime. Use it to add services
  public void ConfigureDatabase(IServiceCollection services)
  {
    services.AddDbContext<<%= projectNamePascal %>DbContext>(options => {
      options
        .UseNpgsql(DbConnectionString, b => b.MigrationsAssembly("<%= projectNamePascal %>"))
        .UseSnakeCaseNamingConvention();
    });
  }

  private string DbConnectionString 
  {
    get
    {
      string ssmKName = _appSettings.Database.SSMName;
      string rdsEndpoint = _appSettings.Database.Endpoint;
      string rdsDatabase = _appSettings.Database.Name;
      string? serviceURL = Environment.GetEnvironmentVariable("SecretsManagerServiceURL");
      AmazonSecretsManagerConfig config = new AmazonSecretsManagerConfig();
      if (!string.IsNullOrEmpty(serviceURL))
      {
        config.ServiceURL = serviceURL;
      }
      IAmazonSecretsManager client = new AmazonSecretsManagerClient(config);
      ISecretsProvider secretsProvider = ParametersManager.SecretsProvider.UseClient(client);
      var credentials = new Dictionary<string, string>();
      credentials["username"] = _appSettings.Database.Username;
      credentials["password"] = _appSettings.Database.Password;
      if (!string.IsNullOrEmpty(ssmKName))
      {
        string? ssmString = secretsProvider.Get(ssmKName);
        credentials = JsonSerializer.Deserialize<Dictionary<string, string>>(ssmString);
      }
      string dbConnectionString = new NpgsqlConnectionStringBuilder() {
        Host = rdsEndpoint,
        Database = rdsDatabase,
        Username = credentials["username"],
        Password = credentials["password"]
      }.ConnectionString;
      return dbConnectionString;
    }
  }
}